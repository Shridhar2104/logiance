scalar DateTime

type Account {
	id: String!
	name: String!
    password: String!
    email: String!
    orders: [Order!]!
    shopnames:[ShopName!]!
}

type ShopName {
    shopname: String!
}

type OrderLineItem {
	id: String!
	amount: Float!
    description: String!
}

type Order {
	id: String!
	amount: Float!
    accountId: String!
	createdAt: DateTime!
    description: String!
    lineItems: [OrderLineItem!]!
}

type ShopSyncStatus {
    success: Boolean!
    errorMessage: String
    ordersCount: Int!
}

type ShopSyncDetails {
    shopName: String!
    status: ShopSyncStatus!
}

type SyncOrdersResult {
    overallSuccess: Boolean!
    message: String
    shopResults: [ShopSyncDetails!]!
}




input PaginationInput {
    skip: Int!
    take: Int!
}


input AccountInput {
  name: String!
  password: String!
  email: String!
}

input OrderLineItemInput {
    id: String!
    amount: Float!
    description: String!
}

input OrderInput {
    accountId: String!
    lineItems: [OrderLineItemInput!]!
}

#shipping types
input ShippingRateInput {
  originPincode: Int!
  destinationPincode: Int!
  weight: Int!
  courierCodes: [String!]
  paymentMode: PaymentMode!
  dimensions: [PackageDimensionInput!]
}

input PackageDimensionInput {
  length: Float!
  width: Float!
  height: Float!
  weight: Float!
}

input AvailabilityInput {
  originPincode: Int!
  destinationPincode: Int!
}

enum PaymentMode {
  COD
  PREPAID
}

type ShippingRateResponse {
  success: Boolean!
  rates: [CourierRate!]
  error: String
}

type CourierRate {
  courierCode: String!
  courierName: String!
  serviceType: String!
  rateDetails: RateDetails!
  estimatedDays: Int!
}

type RateDetails {
  totalAmount: Float!
  grossAmount: Float!
  taxAmount: Float!
  codCharges: Float!
  fuelSurcharge: Float!
}

type CourierAvailabilityResponse {
  success: Boolean!
  availableCouriers: [CourierInfo!]!
  error: String
}

type CourierInfo {
  courierCode: String!
  courierName: String!
  supportedServices: [String!]!
}

type Mutation {
    createAccount(Account: AccountInput!): Account!
    integrateShop(shopName: String!): String!
    exchangeAccessToken(shopName: String!, code: String!, accountId: String!): Boolean!
    syncOrders(accountId: String!): SyncOrdersResult! 

    #shipping part starts here
    calculateShippingRates(input: ShippingRateInput!): ShippingRateResponse!
    getAvailableCouriers(input: AvailabilityInput!): CourierAvailabilityResponse! 

}

type Query {
    getAccountByID(email: String!, password: String!): Account!
    accounts(pagination: PaginationInput!): [Account!]!
} 

type Accounts {
    orders(pagination: PaginationInput!): [Order!]!
}